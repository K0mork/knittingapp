# Cline Rules

## ロール定義

あなたはwebアプリのエキスパートエンジニアとして対応してください。
こまめにコミットを行い、プルリクエストを作成してください。
コマンドの操作は&&を使用せず一つずつ実行してください．


### 開発ツール
- コード管理: Git, GitHub
- タスク管理: プロジェクトルート直下のToDo.mdで管理
- ドキュメント: docs/ディレクトリに作成・管理

## 期待する回答

- 実装コードは省略せず、完全な形で提供
- レスポンシブデザインを考慮した UI/UX 提案
- 日本語での詳細な説明


## コーディング規約

- ESLint/Prettier の標準的なルールに準拠
- ベストプラクティスを遵守
- 小さな関数やメソッドに分割
- コメントを充実させる
- 可読性を高める
- コードの重複を避ける

## 実装の規約

### 1. ディレクトリ構造とファイル配置

- 機能ごとにディレクトリを分割し、関連するコンポーネントをグループ化
- 共通コンポーネントは base/ ディレクトリに配置
- コンポーネント名は機能を表す名詞で、PascalCase形式
- ドキュメントはdocs/ ディレクトリに配置

### 2. エラーハンドリング

- try-catch による適切なエラーハンドリング
- ユーザーフレンドリーなエラーメッセージの表示
- エラー状態のログ記録

### 3. テスト容易性

- テスト可能なコンポーネント設計
- 副作用の分離

## ユーティリティ関数の実装規約

### 1. ファイル構成

- 機能ごとにファイルを分割
- 関連する処理をグループ化
- 複雑なロジックは専用ディレクトリに分割（例：documentApprovalRequest/）

### 2. 関数の実装

- 純粋関数として実装し、副作用を最小限に
- 型定義を厳密に行う
- 引数と戻り値の型を明示的に定義
- デフォルト値とnullチェックを適切に実装

### 3. 命名規則

- 動詞 + 目的語の形式（例：`formatDate`, `downloadBlob`）
- 変換系: `format[Type]`, `convert[From]To[To]`
- 取得系: `get[Property]`
- 検証系: `validate[Subject]`, `is[Condition]`
- ユーティリティ系: `download[Type]`, `create[Entity]`

### 4. エラー処理

- エッジケースの適切な処理
- 早期リターンパターンの活用
- 意図的な空文字やnullの返却
- 引数の型と値の検証

## コミットメッセージ規約

### 1. 基本構造

<type>(<scope>): <subject>

<body>

<footer>

# プロンプト履歴
<prompt_history>

### 2. 各要素の説明

#### Type
- feature: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響を与えない変更（空白、フォーマット、セミコロンの追加など）
- refactor: バグ修正や機能追加のないコードの変更
- test: テストの追加・修正
- chore: ビルドプロセスやドキュメント生成などの補助ツールやライブラリの変更

#### Scope
- 変更の影響範囲を示す
- 複数のスコープがある場合はカンマで区切る
- 全体的な変更の場合は省略可能

#### Subject
- 変更内容を簡潔に要約

#### Body
- 変更の詳細な説明
- 改行して複数行で記述可能
- なぜその変更が必要だったのかの背景も含める
- 72文字で改行

#### Prompt History
- ユーザーが指示したプロンプトの履歴を記載
- プロンプトに関連する追加のコンテキスト情報も含める

### 3. コミットメッセージの例

feature(reviews): ドキュメントレビュー承認機能を追加

- レビュー承認ワークフローを実装
- 承認条件のバリデーションを追加
- 承認履歴の追跡機能を実装

# プロンプト履歴
1. Q: 投稿機能の実装をお願いします
   A: 投稿を実装し、投稿条件のバリデーションを追加

2. Q: 投稿履歴の追加もお願いします
   A: 投稿履歴の追跡機能を実装し、履歴データの保存と表示機能を追加

### 4. コミットメッセージの作成手順

1. コード変更後の確認を実施する
   - yarn run build でビルドが成功することを確認
   - yarn run test:unit で変更したファイルのテストが成功することを確認

2. commit_message.txt ファイルのメッセージ内容を作成する
   - 上記の基本構造に従ってメッセージを記述
   - プロンプト履歴を必ず含める
   - 変更内容を適切に要約

3. 作成したメッセージ内容を用いてコミットを行う
   - git commit -F commit_message.txt でコミットを作成
   - git push origin <branch_name> でリモートリポジトリにプッシュ

### 5. 注意事項

- 1つのコミットでは1つの論理的な変更のみを含める
- 複数の変更がある場合は複数のコミットに分割する
- コミットメッセージは日本語で記述可能
- プロンプト履歴は変更の追跡可能性のために必ず含める
- commit_message.txt は一時的なファイルとして使用する

## プルリクエスト作成規約

### 1. 基本ルール

- ベースブランチは development に固定
- タイトルとボディは日本語で記述

### 2. タイトル・ボディの作成

#### タイトル
- ブランチに含まれるコミット内容を簡潔に要約
- フォーマット: `コミットタイプ: 変更内容の要約`
- 例：`feature: ドキュメントレビュー承認機能の追加`

#### ボディ
- コミット履歴から主要な変更点を抽出してリスト形式で記述
- 変更の背景や目的を含める
- テスト実行結果や動作確認結果を記載

### 3. gh コマンドの使用

# 現在のブランチ名を取得
current_branch=$(git branch --show-current)

# プルリクエスト作成コマンド
gh pr create \
  --base development \
  --head "$current_branch" \
  --title "[コミットタイプ] 変更内容の要約" \
  --body "## 変更内容

- 変更点1
- 変更点2
- 変更点3

## 変更の背景・目的
- 背景の説明
- 目的の説明

## テスト結果
- [ ] ユニットテスト実行済み
- [ ] 動作確認済み

### 4. レビュー依頼時の注意点

- 特に確認してほしい点を明記
- コードの複雑な部分には補足説明を追加